// <auto-generated />
using ESD6NL.DriverSystem.DAL;
using ESD6NL.DriverSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ESD6NL.DriverSystem.DAL.Migrations
{
    [DbContext(typeof(DriverSystemContext))]
    [Migration("20180617120859_StreetNrIsStringNotInt")]
    partial class StreetNrIsStringNotInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.Property<string>("StreetNr");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("carTrackerID");

                    b.Property<string>("licensePlate");

                    b.Property<int?>("rdwDataRdwID");

                    b.Property<int?>("rdwFuelDataRDWFuelID");

                    b.Property<int?>("userID");

                    b.HasKey("CarID");

                    b.HasIndex("licensePlate")
                        .IsUnique();

                    b.HasIndex("rdwDataRdwID");

                    b.HasIndex("rdwFuelDataRDWFuelID");

                    b.HasIndex("userID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Invoice", b =>
                {
                    b.Property<long>("invoiceNr")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("filePath");

                    b.Property<int>("paymentStatus");

                    b.Property<DateTime>("period");

                    b.Property<decimal>("totalAmount");

                    b.Property<decimal>("totalKm");

                    b.Property<int?>("userID");

                    b.HasKey("invoiceNr");

                    b.HasIndex("userID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.RDW", b =>
                {
                    b.Property<int>("RdwID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("aantal_cilinders");

                    b.Property<string>("aantal_deuren");

                    b.Property<string>("aantal_rolstoelplaatsen");

                    b.Property<string>("aantal_wielen");

                    b.Property<string>("aantal_zitplaatsen");

                    b.Property<string>("afstand_hart_koppeling_tot_achterzijde_voertuig");

                    b.Property<string>("afstand_voorzijde_voertuig_tot_hart_koppeling");

                    b.Property<string>("api_gekentekende_voertuigen_assen");

                    b.Property<string>("api_gekentekende_voertuigen_brandstof");

                    b.Property<string>("api_gekentekende_voertuigen_carrosserie");

                    b.Property<string>("api_gekentekende_voertuigen_carrosserie_specifiek");

                    b.Property<string>("api_gekentekende_voertuigen_voertuigklasse");

                    b.Property<string>("breedte");

                    b.Property<string>("bruto_bpm");

                    b.Property<string>("catalogusprijs");

                    b.Property<string>("cilinderinhoud");

                    b.Property<string>("datum_eerste_afgifte_nederland");

                    b.Property<string>("datum_eerste_toelating");

                    b.Property<string>("datum_tenaamstelling");

                    b.Property<string>("eerste_kleur");

                    b.Property<string>("europese_voertuigcategorie");

                    b.Property<string>("export_indicator");

                    b.Property<string>("handelsbenaming");

                    b.Property<string>("inrichting");

                    b.Property<string>("kenteken");

                    b.Property<string>("lengte");

                    b.Property<string>("massa_ledig_voertuig");

                    b.Property<string>("massa_rijklaar");

                    b.Property<string>("maximum_massa_samenstelling");

                    b.Property<string>("maximum_massa_trekken_ongeremd");

                    b.Property<string>("maximum_trekken_massa_geremd");

                    b.Property<string>("merk");

                    b.Property<string>("openstaande_terugroepactie_indicator");

                    b.Property<string>("plaats_chassisnummer");

                    b.Property<string>("taxi_indicator");

                    b.Property<string>("technische_max_massa_voertuig");

                    b.Property<string>("toegestane_maximum_massa_voertuig");

                    b.Property<string>("tweede_kleur");

                    b.Property<string>("typegoedkeuringsnummer");

                    b.Property<string>("uitvoering");

                    b.Property<string>("variant");

                    b.Property<string>("vermogen_massarijklaar");

                    b.Property<string>("vervaldatum_apk");

                    b.Property<string>("voertuigsoort");

                    b.Property<string>("volgnummer_wijziging_eu_typegoedkeuring");

                    b.Property<string>("wacht_op_keuren");

                    b.Property<string>("wam_verzekerd");

                    b.Property<string>("wielbasis");

                    b.Property<string>("zuinigheidslabel");

                    b.HasKey("RdwID");

                    b.ToTable("RDW");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.RDWFuel", b =>
                {
                    b.Property<int>("RDWFuelID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("brandstof_omschrijving");

                    b.Property<string>("brandstof_volgnummer");

                    b.Property<string>("brandstofverbruik_buiten");

                    b.Property<string>("brandstofverbruik_gecombineerd");

                    b.Property<string>("brandstofverbruik_stad");

                    b.Property<string>("co2_uitstoot_gecombineerd");

                    b.Property<string>("emissiecode_omschrijving");

                    b.Property<string>("geluidsniveau_stationair");

                    b.Property<string>("kenteken");

                    b.Property<string>("milieuklasse_eg_goedkeuring_licht");

                    b.Property<string>("nettomaximumvermogen");

                    b.Property<string>("toerental_geluidsniveau");

                    b.HasKey("RDWFuelID");

                    b.ToTable("RDWFuel");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.RoutePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Lat");

                    b.Property<string>("Lon");

                    b.Property<int?>("rowId");

                    b.HasKey("Id");

                    b.HasIndex("rowId");

                    b.ToTable("RoutePoints");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Row", b =>
                {
                    b.Property<int>("rowId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("costs");

                    b.Property<DateTime>("date");

                    b.Property<string>("dayOfWeek");

                    b.Property<long?>("invoiceNr");

                    b.Property<decimal>("km");

                    b.HasKey("rowId");

                    b.HasIndex("invoiceNr");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Translation", b =>
                {
                    b.Property<int>("TranslationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Language");

                    b.Property<string>("Term");

                    b.Property<string>("Translated");

                    b.HasKey("TranslationID");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<string>("Language");

                    b.Property<DateTime>("birthDay");

                    b.Property<long>("citizenServiceNumber");

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("lastName");

                    b.Property<DateTime>("lastSyncTime");

                    b.Property<string>("password");

                    b.Property<string>("userName");

                    b.HasKey("userID");

                    b.HasIndex("AddressID");

                    b.HasIndex("email", "userName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Car", b =>
                {
                    b.HasOne("ESD6NL.DriverSystem.Entities.RDW", "rdwData")
                        .WithMany()
                        .HasForeignKey("rdwDataRdwID");

                    b.HasOne("ESD6NL.DriverSystem.Entities.RDWFuel", "rdwFuelData")
                        .WithMany()
                        .HasForeignKey("rdwFuelDataRDWFuelID");

                    b.HasOne("ESD6NL.DriverSystem.Entities.User")
                        .WithMany("cars")
                        .HasForeignKey("userID");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Invoice", b =>
                {
                    b.HasOne("ESD6NL.DriverSystem.Entities.User")
                        .WithMany("invoices")
                        .HasForeignKey("userID");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.RoutePoint", b =>
                {
                    b.HasOne("ESD6NL.DriverSystem.Entities.Row")
                        .WithMany("navigatedRoutes")
                        .HasForeignKey("rowId");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.Row", b =>
                {
                    b.HasOne("ESD6NL.DriverSystem.Entities.Invoice")
                        .WithMany("rows")
                        .HasForeignKey("invoiceNr");
                });

            modelBuilder.Entity("ESD6NL.DriverSystem.Entities.User", b =>
                {
                    b.HasOne("ESD6NL.DriverSystem.Entities.Address", "address")
                        .WithMany()
                        .HasForeignKey("AddressID");
                });
#pragma warning restore 612, 618
        }
    }
}
